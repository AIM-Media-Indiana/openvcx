#
# OpenVSX (Video Streaming eXchange) configuration.
#

#
# listen=[ local HTTP server ip address:port ]
# This defines the HTTP listener for broadcast mode.  
# To access the HTTP server from a remote machine set this to 
# 'http://0.0.0.0:8080' or just 'http://8080'.  
# To access only from localhost set to  'http://127.0.0.1:8080'.  
# To enable SSL/TLS use 'https://'.
# To enable Digest auth use 'http://username:password@127.0.0.1:8080'
# listen=http://127.0.0.1:8080
#
listen=http://127.0.0.1:8080


#
# media=[ media library dir ]
# This is the root directory of all your stored video files.
# media=
media=


#
# home=[ home dir ]
# Default value is automatically discovered based on invocation path.
# home=
#home=


#
# userCfg=[ user configuration properties ]
# The user config file is controlled automatically to persist user 
# streaming settings.
#
userCfg=etc/user.conf


#
# logFile=[ output log file ]
# Output log file path. 
#
#logFile=log/vsx.log


#
# logFileMaxSize=[ max file size in bytes ]
# Maximum size in bytes of an individual log file.
#
#logFileMaxSize=1048576


#
# logFileMaxCount=[ max number of rolled log files ]
# Maximum number of log files to preserve.  When the current log 
# file size reaches logFileMaxSize, it will be renamed to 
# [logFile].1 .  Each preserved log file index will be incremented.
#
#logFileMaxCount=5


#
# dbDir=[ media database dir ]
# This directory is used to store video thumbnail data and annotations.
# Defaults to [media]/vsxdb
#
#dbDir=


#
# dbDisable=[ 0 | 1 ]
# Set to 1 to disable media indexing database of the media library.
# This option is superseded by the '--nodb' command line argument.
#
#dbDisable=0


#
# maxConn=[ 0-100 ]
# Maximum number of HTTP client connection threads.  
# All HTTP based stream output methods utilize this resource and
# may be limited by the lesser of 'maxconn=', or the stream output
# type specific limit.
# Default is 20. (Max is 4 in Lite version)
#
#maxConn=20


#
# thumb=[ path to thumbnail creation script ]
# thumb is an external script or program used to generate thumbnail 
# images of stored video content in the media library.
#
thumb=bin/ffmpeg_tn


#
# thumbLog=[ path to thumb script output log ]
# Log file path of thumbnail creation.
#
thumbLog=log/thumb.log


#
# thumbSmall=[ width x height ]
# Thumbnail output dimensions for generated video icons.
#
#thumbSmall=120x66


#
# thumbLarge=[ width x height ]
# Thumbnmail output dimensions for rollover video preview.
#
#thumbLarge=260x146


#
# verbose=[ 0 | 1 ]
# Log verbosity output level.
# Default value is 'verbose=0'
#
#verbose=0


#
# ignoreDirPrefix=[ " "," " ]
# List of directory name prefixes which should be explicitly ignored from the
# media database.  Each entry should be surrounded by quotes.
#
ignoreDirPrefix="$RECYCLE",".Trash"


#
# ignoreFilePrefix=[ " "," " ]
# List of filename prefixes which should be explicitly ignored from the
# media database.  Each entry should be surrounded by quotes.
#
ignoreFilePrefix="_"


#
# password=[ string ]
# Optional password to access the administrative interface
# available at the "listen=" address and port
# For eg.  http://[server ip]:8080/?pass=your_password
# Note: The administrative interface password is separate from 
# the httplive / live password, and does not restrict access
# to any live media stream output.
#
#password=


#
# followSymLink= [ 0 | 1 ]
# Controls whether the server will follow symbolic links.  If enabled 
# media resources within the '/html/dash' and '/html/httplive' directories
# can be symbolic links pointing to external locations.  This could 
# potentially be considered as a security vulnerability.
#
#followSymLink=0


#
# SSLCertificate=[ SSL/TLS X.509 Certificate file path ]
# Path of a PEM encoded SSL X.509 Certificate for SSL/TLS.  
# The certificate can be self-signed or signed by a CA.  The demo 
# certificate located in 'etc/cacert.pem' should not be used in production
# systems.
#
#SSLCertificate=etc/cacert.pem


#
# SSLPrivateKey=[ SSL/TLS private key file path ]
# Path of a PEM encoded SSL private key file for SSL/TLS.  
# The demo key located in 'etc/privkey.pem' should not be used in 
# production systems.
#
#SSLPrivateKey=etc/privkey.pem


#
# DTLSCertificate=[ SSL/DTLS X.509 Certificate file path ]
# Path of a PEM encoded SSL X.509 Certificate for SSL/DTLS/SRTP.  
# The certificate can be self-signed or signed by a CA.  The demo 
# certificate located in 'etc/cacert.pem' should not be used in production
# systems.
#
#DTLSCertificate=etc/cacert.pem


#
# DTLSPrivateKey=[ SSL/DTLS private key file path ]
# Path of a PEM encoded SSL private key file for SSL/DTLS/SRTP
# The demo key located in 'etc/privkey.pem' should not be used in 
# production systems.
#
#DTLSPrivateKey=etc/privkey.pem


#
# DTLSRTPHandshakeTimeoutMs=[ timeout in miliseconds ]
# DTLS active handshake establishment timeout for RTP output.  
# Stream output will abort if one ore more DTLS or DTLS-SRTP RTP 
# output sessions could not be established within the specified time.
#
#DTLSRTPHandshakeTimeoutMs=20000


#
# DTLSRTCPHandshakeAdditionalMs=[ time in miliseconds ]
# DTLS active handshake establishment additional grace period to 
# allow completion of DTLS or DTLS-SRTP RTCP handshakes after the
# RTP handshake(s) has been completed.  This grace period is added
# to the value of DTLSRTPHandshakeTimeoutMs if there are pending RTCP
# handshakes which have not yet been established and before there
# is DTLS or DTLS RTP/RTCP packet output.
#
#DTLSRTCPHandshakeAdditionalMs=1000


#
# DTLSRTCPHandshakeAdditionalGiveupMs=[ time in miliseconds ]
# DTLS active handshake establishment additional timeout to 
# allow completion of DTLS or DTLS-SRTP RTCP handshakes after the
# RTP handshake(s) has been completed.  This grace period is added
# to the value of DTLSRTPHandshakeTimeoutMs if there are pending RTCP
# handshakes which have not yet been established.
# RTCP channel output will abort if one ore more DTLS or DTLS-SRTP RTCP 
# output sessions could not be established within the specified time.
#
#DTLSRTCPHandshakeAdditionalGiveupMs=5000


#
# livePassword=[string]
# Optional password to access any live 'tslive' or 'httplive' 
# URL live broadcast stream enabled via HTTP. If enabled, the 
# password must be provided by a connecting client by specifying 
# the 'pass=' URL parameter. 
# For eg.  http://[server ip]:[port]/tslive?pass=your_password
#
#livePassword=


#
# dashDir=[ directory path ]
# Optional directory to use for output of intermediate segmented
# .mp4 and .mpd files used for MPEG-DASH.  By default this is set to
# 'html/dash'
# To prevent unnecessary disk activity, it is recommended to create an
# in-memory file system for storing temporary .mp4, .mpd files.
# For eg.  "sudo mkdir /usr/local/ram;
# sudo mount -t tmpfs -o size=102400K tmpfs /usr/local/ram/"
#dashDir=/usr/local/ram/


#
# dash=[ local address:port ]
# HTTP listen port for '/dash' URL for MPEG-DASH 
# streaming.  By default this is set to 'http://8080' or
# 'http://0.0.0.0:8080'.  
# To enable a listener on localhost use 'http://127.0.0.1:8080'.  
# To enable SSL/TLS use 'https://'.  Up to
# four unique listeners can be given by specifying multiple line entries.
# To enable Digest auth use 'http://username:password@0.0.0.0:8080'
# The '--dash' command line option takes precedence over this value.
#
#dash=http://127.0.0.1:8080


#
# dashFilePrefix=[ file prefix ]
# Output file name prefix for segmented output files.
#
#dashFilePrefix=out


#
# dashIndexCount=[ 1 - n ]
# Number of .mp4 fragmented media files to be referenced in an MPEG-DASH
# MPD using the SegmentList tag.
# Default value is 3.
# Using higher than normal values may lead to excessive delay
# for real-time content.
#
#dashIndexCount=3


#
# dashUrlHost=[ url prefix ]
# Output URL prefix for accessing output media files which will be
# listed in the MPEG-DASH MPD.
# For eg., if the media files are accessible through a different
# URL, dashUrlHost=http://[host]:[port]/[virtual path]
#
#dashUrlHost=


#
# dashLiveMax=[ 0-100 ]
# Maximum number of simultaneous '/dash' server listener threads
#
#dashLiveMax=4


#
# dashMaxDuration=[ duration in seconds ]
# The maximum segment duration as a floating point value in seconds of  
# each fragmented media file.
#
#dashMaxDuration=10.0


#
# dashMinDuration=[ duration in seconds ]
# The minimum segment duration as a floating point value in seconds of  
# each fragmented media file.
# If this value is greater than 0, the segmentor will attempt to look
# for a keyframe after the minimum duration.  Each segment should begin
# on a video keyframe.
# If this value is set to 0, then the segmentor will produce fragments
# at the max duration setting only.
#
#dashMinDuration=5.0


#
# dashFragmentDuration=[ duration in seconds ]
# The fragment duration of each mp4 movie fragment (MOOF) as a floating 
# point value in seconds.
#
#dashFragmentDuration=0.5


#
# dashUseInit=[ 0 | 1 ]
# When this flag is set the MPEG-DASH packetizer will construct an 
# mp4 initializer segment for each representation
#
#dashUseInit=1


#
# httpliveDir=[ directory path ]
# Optional directory to use for output of intermediate segmented
# .ts files used for HTTP Live streaming.  By default this is set to
# 'html/httplive'
# To prevent unnecessary disk activity, it is recommended to create an 
# in-memory file system for storing temporary .ts files. 
# For eg.  "sudo mkdir /usr/local/ram; 
# sudo mount -t tmpfs -o size=102400K tmpfs /usr/local/ram/"
#
#httpliveDir=


#
# httplive=[ local address:port ]
# HTTP Live listen port for '/httplive' URL httplive (iPhone / iPad) 
# streaming.  By default this is set to 'http://8080' or 
# 'http://0.0.0.0:8080'.  
# To enable a listener on localhost use 'http://127.0.0.1:8080'.  
# To enable SSL/TLS use 'https://'.  Up to 
# four unique listeners can be given by specifying multiple line entries.
# To enable Digest auth use 'http://username:password@0.0.0.0:8080'
# The '--httplive' command line option takes precedence over this value.
#
#httplive=http://127.0.0.1:8080


#
# httpliveFilePrefix=[ file prefix ]
# Output file name prefix for segmented output files.
#
#httpliveFilePrefix=out


#
# httpliveIndexCount=[ 1 - n ]
# Number of .ts files to be referenced in an HTTPLive .m3u8 playlist.
# Default value is 4.  This value should never be less than 3.
# Using higher than normal values may lead to excessive delay
# for real-time content.
#
#httpliveIndexCount=4


#
# httpliveNoDelete=[ 0 | 1 ]
# When this flag is set, any .ts and .m3u8 files will not be
# deleted on exit.
#
#httpliveNoDelete=0


#
# httpliveUrlHost=[ url prefix ]
# Output URL prefix for output .ts files.  
# For eg., if the .ts files are accessible through a different
# URL, httpliveurlhost=http://[host]:[port]/[virtual path]
#
#httpliveUrlHost=


#
# httpliveChunk=[ duration in seconds ]
# Duration as a floating point value in seconds of  each
# .ts segment used for HTTP Live streaming.  Default value is 10.0
# A value of 5.0 can be used to decrease real-time delay.
#
#httpliveChunk=10.0


# httpliveMax=[ 0-100 ]
# Maximum number of simultaneous 'httplive' server listener threads
#
#httpliveMax=4


#
# mkvlive=[ local address:port ]
# HTTP MKV / WebM encapsulation listen address for '/mkvlive' URL 
# By default this is set to 'http://8080' or 'http://0.0.0.0:8080'.  
# To enable a listener on localhost use 'http://127.0.0.1:8080'.  
# To enable SSL/TLS use 'https://'.  Up to 
# four unique listeners can be given by specifying multiple line entries.
# To enable Digest auth use 'http://username:password@0.0.0.0:8080'
# The '--mkvlive' command line option takes precedence over this value.
#
#MKVLive=http://127.0.0.1:8080


# MKVliveMax=[ 0-100 ]
# Maximum number of simultaneous 'mkvlive' server listener threads
#
#MKVliveMax=4


#
# RTPMax=[ 0-100 ]
# Maximum number of UDP / RTP output sessions.  
# A single session encompasses bot video and audio channels even if 
# they are using different ports.  RTSP non-interleaved output sessions
# also consume RTP resources.
# Default is 4. (Max is 4 in Lite version)
#
#RTPMax=4


#
# RTPMaxPlayoutDelay=[ timeout in miliseconds ]
# Maximum RTP playout buffer delay length in miliseconds to accomodate
# a lost, late, or out-of-order RTP (UDP) packet.  If an RTP sequence gap
# is observed, the RTP jitter buffer will queue any incoming packets
# until this timeout is reached or the missing sequence number
# packet finally arrives.  The '--maxrtpdelay' command line option
# takes precedence over this value.
# Default value is 100.
#
#RTPMaxPlayoutDelay=110


#
# RTCPReceiverReportInterval = [ float duration in seconds ] 
#
# Controls RTCP Receiver Report transmission interval in seconds.
# A value of 0 disables transmission of RTCP Receiver Reports.
#
#RTCPReceiverReportInterval=0


#
# RTCPSenderReportInterval= [ float duration in seconds ] 
#
# Controls RTCP Sender Report transmission interval in seconds.
# A value of 0 disables transmission of RTCP Sender Reports.
#
#RTCPSenderReportInterval=5.0


# RTCPReplyToMulticastStream= [ 0 | 1 ]
#
# If set to 1, permits the transmission of RTCP messages to an originator
# of an RTP multicast transmission.  This may include RTCP Receiver
# Reports and Feedback messages.
#
#RTCPReplyToMulticastStream=0


#
# RTSPLive=[ local address:port ]
# RTSP Server listener address and port for '/rtsp' URL live
# broadcast.  By default this is set to 'rtsp://1554' or 
# 'rtsp://0.0.0.0:1554'.  
# To enable a listener on localhost use 'rtsp://127.0.0.1:1554'.  
# To enable SSL/TLS use 'rtsps://'.  Up to four unique listeners 
# can be given by specifying multiple line entries.
# To enable Digest auth use 'rtsp://username:password@0.0.0.0:1554'
# takes precedence over this value.
# The '--rtsp' command line option takes precedence over this value.
#
#RTSPLive=rtsp://127.0.0.1:1554


#
# RTSPLiveMax=[ 0-100 ]
# Maximum number of RTSP output sessions.
# Default is 4. (Max is 4 in Lite version)
#
#RTSPLiveMax=4


#
# RTSPSessionTimeout=[ 0-n ]
# RTSP session idle timeout in seconds.  Default value is 30.
# The RTSP session idle timeout value is usually monitored based
# on the last control channel request from an RTSP client.  If the 
# timeout is exceeded the RTSP session is closed.
#
#RTSPSessionTimeout=30


#
# RTSPRefreshTimeoutViaRTCP=[ 0 | 1 ]
# If set to 1, the RTSP session timeout will be refreshed whenever
# an RTCP Receiver Report is received from the RTSP client.
# Otherwise the activity timer will be refreshed according to the last
# RTSP client control channel command.  This only applies for UDP 
# RTSP sessions, and not TCP interleaved sessions.
#
#RTSPRefreshTimeoutViaRTCP=1


#
# RTSPInterleavedQueueSlots=[ 1-n ]
# Each RTSP session which is interleaved (TCP) has its own buffer 
# of output video and audio frames to transmit to an RTSP client.  
# This value determines the length of the queue.  
#
#RTSPInterleavedQueueSlots=800


#
# RTSPInterleavedQueueSlotSize=[ 1-n ]
# The size in bytes of each slot in the RTSP client buffer only
# used for RTSP interleaved sessions.  
#
#RTSPInterleavedQueueSlotSize=1470


#
# RTSPInterleavedQueueSlotSizeMax=[ 1-n ]
# The maximum limit in bytes up to which the value defined by 
# 'RTSPInterleavedQueueSlotSize' is allowed to grow up to.
#
#RTSPInterleavedQueueSlotSizeMax=4096


#
# RTSPLocalRTPPort=[ n ]
# Some firewalls will only allow RTSP / UDP packets with source port
# 6970 - 9999.  If this value is set, the server will use the designated
# UDP source port for all outbound RTP packets.  If this value is not set,
# the server's UDP source port for RTP packets will be random.
#
#RTSPLocalRTPPort=6970


#
# RTMPLive=[ local address:port ]
# RTMP Server listener address and port for '/rtmp' URL live
# broadcast.  By default this is set to 'rtmp://1935' or 'rtmp://0.0.0.0:1935'.  
# To enable a listener on localhost use 'rtmp://127.0.0.1:1935'.  
# To enable SSL/TLS use 'rtmps://'.  Up to four unique listeners can be 
# given by specifying multiple line entries.
# The '--rtmp' command line option takes precedence over this value.
#
#RTMPLive=rtmp://127.0.0.1:1935


#
# RTMPLiveMax=[ 0-100 ]
# Maximum number of RTMP output client sessions.   
# Default is 4. (Max is 4 in Lite version)
#
#RTMPLiveMax=4


#
# RTMPQueueSlots=[ 1-n ]
# Each RTMP/FLV session has its own buffer of output video and audio 
# frames to transmit to an RTMP client (Flash player).  This value
# determines the length of the queue in terms of frames.  
#
#RTMPQueueSlots=60


#
# RTMPQueueSlotSize=[ 1-n ]
# The size in bytes of each slot in the RTMP/FLV client buffer.  
#
#RTMPQueueSlotSize=20000


#
# RTMPQueueSlotSizeMax=[ 1-n ]
# The maximum limit in bytes up to which the value defined by 
# 'RTMPQueueSlotSize' is allowed to dynamically grow up to.
#
#RTMPQueueSlotSizeMax=320000


#
# FLVLive=[ local address:port ]
# HTTP listener address and port for '/flvlive' URL live broadcast
# streaming using FLV encapsulation over HTTP.  By default this
# is set to 'http://8080' or 'http://0.0.0.0:8080'.  
# To enable a listener on localhost use 'http://127.0.0.1:8080'.  
# To enable SSL/TLS use 'https://'.  Up to four unique listeners can be given by 
# specifying multiple line entries.   
# To enable Digest auth use 'http://username:password@0.0.0.0:8080'
# The '--flvlive' command line option takes precedence over this value.
#
#FLVLive=http://127.0.0.1:8080


#
# FLVLiveMax=[ 0-100 ]
# Maximum number of 'flvlive' clients subscribed to any flvlive
# broadcast via HTTP.
# Default is 4. (Max is 4 in Lite version)
#
#FLVLiveMax=4


#
# tslive=[ local address:port ]
# HTTP listener address and port for '/tslive' URL live broadcast 
# streaming using MPEG-2 TS encapsulation over HTTP.  By default this 
# is set to 'http://8080' or 'http://0.0.0.0:8080'.  
# To enable a listener on localhost use 'http://127.0.0.1:8080'.  
# To enable SSL/TLS use 'https://'.  Up to four unique listeners can be given by 
# specifying multiple line entries.   
# To enable Digest auth use 'http://username:password@0.0.0.0:8080'
# The '--tslive' command line option takes precedence over this value.
#
#tslive=http://127.0.0.1:8080


#
# tsliveMax=[ 0-100 ]
# Maximum number of 'tslive' clients subscribed to any tslive
# broadcast via HTTP.
# Default is 4. (Max is 4 in Lite version)
#
#tsliveMax=4


#
# tsliveQueueSlots=[ 1-n ]
# Each tslive client connection has its own buffer of output 
# MPEG-2 TS packets.  This value determines the default length of 
# the queue.  The client can provide the URL parameter 'queue='
# to determine the size of its queue.
#
#tsliveQueueSlots=500


#
# tsliveQueueSlotsMax=[ 1-n ]
# The maximum allowed value for 'tsliveQueueSlots'.  Any 'queue='
# URL parameter supplied with the '/tslive' URL will be capped 
# by this value. 
#
#tsliveQueueSlotsMax=2000


#
# tsliveQueueSlotSize=[ 188-n ]
# The size in bytes of each slot in the tslive client buffer. 
# This value should be a multiple of the TS packet size, 188. 
#
#tsliveQueueSlotSize=3948


#
# captureTimeout=[ timeout in miliseconds ]
# Idle timeout for datagram socket based input capture (such as UDP / RTP) 
# for any packet after the first packet.  
# Set to 0 for no timeout.
# Default 10000 ms
#
#captureTimeout=10000


#
# captureTimeout_first=[ timeout in miliseconds ]
# Idle timeout for datagram socket based input capture (such as UDP / RTP) 
# for the initial packet.  
# Set to 0 for no timeout.
# Default 30000 ms
#
#captureTimeoutFirst=30000


#
# channelChanger=
# External program used to change viewing channels.  The numeric channel value
# will be appended to the given path when changing channels via the UI.
# Sample channel change applications can be found in a MythTV contrib downloaded
# bundle. 
# For eg. channelChanger=6200ch
#
#channelChanger=


#
# localHost=
# IP address or hostname which will be used in place of the default IP Address 
# obtained automatically from the local system network interface.  This value 
# will be used to override the default IP Address for SDP, RTMP, RTSP based 
# streaming.  It may be necessary to set this value to a global machine IP Address 
# if the system is used to bridge a private and public network.
#
#localHost=


#
# xcodeArgs=[ transcoding options or transcoder config file ]
#
# Refer to the sample transcoder config file etc/xcode.conf or
# the User Guide Documentation for a detailed listing of all transcoding
# parameters.
#
#xcodeArgs="etc/xcode.conf"


#
# license=[ path of license file ]
# Path of license file containing base64 encoded license string
#
#license=etc/license.dat


#
# deviceConfig=[ path of device type configuration ]
# The device profile configuration is used to map client User-Agent
# string to a device profile.
#
#deviceConfig=etc/devices.conf


#
# throttleRate=[ float multiplier ]
# Controls HTTP media transfer bitrate by limiting rate of transmission
# of static media files (.mp4, .flv).  When enabled, progressive-download
# enabled media (for eg. .mp4 with mdat atom at the end of the file) is
# transmitted by sending mdat audio and video samples at a bitrate
# corresponding to the bitrate of the media file multiplied by the
# throttlerate, instead of the maximum bitrate of the network connection.
# A value of 0 disables throttling.
# A value >= 1.0 controls the output bitrate to a a factor of media
# bitrate * 'throttlerate'.
#
throttleRate=1.25


#
# throttlePreBuf=[ float duration in seconds ]
# When 'throttlerate' is enabled, 'throttleprebuf' controls how many
# seconds of media content are transmitted to the client before
# throttling down the transmission bitrate.  A value of several seconds
# enables the client video player to prebuffer enough content to start
# immediate playback.
#
throttlePreBuf=12.0


#
# MPEG2TSPCRIntervalMs=[ 1 ... n ] 
# MPEG-2 Transport Stream packetization max PCR (Program Clock Reference)
# insertion interval in miliseconds.
#
#MPEG2TSPCRIntervalMs=100


#
# MPEG2TSPATIntervalMs=[ 1 ... n ]
# MPEG-2 Transport Stream packetization max PAT (Program Association Table)
# and PMT (Program Map Table) insertion interval in miliseconds.
#
#MPEG2TSPATIntervalMs=250


#
# MPEG2TSCaptureQueueSlots=[ 2-n ]
# Size of the buffer holding any MPEG-2 TS frames obtained from live
# capture.  Actual size in bytes = MPEG2TSCaptureQueueSlot * 12408
# The '--queue' command line option takes precedence over this value.
#
#MPEG2TSCaptureQueueSlots=400


#
# MPEG2TSMinimumPacketSize=[ 0 - MTU ]
# Minimum MPEG-2 TS buffered packet size that is sent via the network.
# The default value is 0, which will use the MTU size to determine how
# many MPEG-2 TS frames will be buffered before being flushed to the
# network.  For eg., setting this value to 188 will allow a packet with
# just one MPEG-2 TS frame to be transmitted if no subsequent frames
# are available.
#
#MPEG2TSMinimumPacketSize=0


#
# videoFrameQueueSlots=[ 2-n ]
# Size of the buffer holding demultiplexed video frames obtained from live
# capture.
# The '--vidq' command line option takes precedence over this value.
#
#videoFrameQueueSlots=64


#
# audioFrameQueueSlots=[ 2-n ]
# Size of the buffer holding demultiplexed audio frames obtained from live
# capture.
# The '--audq' command line option takes precedence over this value.
#
#audioFrameQueueSlots=200


#
# outputStatisticsFile=[ path of output statistics file ]
# Enable dumping stream output statistics such as overall throughput, and 
# burst rates.  For RTP based output RTCP Receiver Report metrics are shown.
# For TCP based output transmitter output buffer fullness is shown.
# The values 'stdout' or 'stderr' can be used instead of an output file path.
#
#outputStatisticsFile=

#
# outputStatisticsIntervalMs=[ n ] 
# If outputStatisticsFile is enabled, this value controls the frequency at
# which output statistics are printed.
#
#outputStatisticsIntervalMs=4000


#
# FIREncoder=[ 0 | 1 ]
# Set to 1 to enable the local encoder to accept IDR requests which are triggered by remote clients.
# This flag controls events such as:
#   - Reception of a remote RTCP Feedback Type FIR for a locally encoded RTP stream output.
#   - Remote RTSP connection for locally encoded RTP stream output.
#   - Any remote TCP based connection for locally encoded stream output such as
#     /tslive, /flvlive, /mkvlive, RTMP, etc...
# This flag does not affect how the 'xcode="videoForceIDR=1"'
# local IDR request is processed when handling an encoder reconfiguration udpate ('/config').
#
#FIREncoder=0


#
# FIRRTCPInputHandler=[ 0 | 1 ]
# Set to 1 to accept RTCP FB FIR requests from a remote RTP receiver of the locally output RTP stream.
#
#FIRRTCPInputHandler=1


#
# FIREncoderFromRemoteConnect=[ 0 | 1 ]
# Set to 1 to create a local encoder IDR request (if needed) upon a remote connection
# request for the locally output media stream(s).  A remote connection can be triggered by
# a request for /tslive, /flvlive, /mkvlive, RTMP, RTSP, etc...
#
#FIREncoderFromRemoteConnect=1


#
# FIREncoderFromRemoteMessag=[ 0 | 1 ]
# Set to 1 to create a local encoder IDR request (if needed) upon a remote FB FIR request
# such as one coming via an RTCP FB FIR message.
#
#FIREncoderFromRemoteMessage=1


#
# FIRSendFromRemoteConnect=[ 0 | 1 ]
# Set to 1 to enable sending RTCP FB FIR requests to a remote RTP sender of the input stream
# upon a remote connection request for the locally output. A remote connection can be triggered
# by a request for /tslive, /flvlive, /mkvlive, RTMP, RTSP, etc...
#
#FIRSendFromRemoteConnect=1


#
# FIRSendFromRemoteMessage=[ 0 | 1 ]
# Set to 1 to enable sending RTCP FB FIR requests to a remote RTP sender of the input stream
# upon receiving a remote FB FIR request, such as one coming via an RTCP FB FIR message.
#
#FIRSendFromRemoteMessage=0


#
# FIRSendFromDecoder=[ 0 | 1 ]
# Set to 1 to enable sending RTCP FB FIR requests to a remote RTP sender of the input stream
# which are initiated by the local decoder if a keyframe is needed.
#
#FIRSendFromDecoder=1


#
#FIRSendFromInputCapture=[ 0 | 1 ]
#
# Set to 1 to enable sending RTCP FB FIR requests to a remote RTP sender of the input stream
# from which are initiated by local RTP input capture processor.  The local input capture 
# processor may request an IDR if RTP packets are missing or late.
#
#FIRSendFromInputCapture=0


#
# NACKRtcpRequestRetransmit=[ 0 | 1 ]
#
# Set to 1 to enable RTCP NACK packets to be sent to request the remote RTP sender to resend
# RTP packets which have been lost in transmission.  If reading an input SDP file to setup
# packet capture, the SDP attribute describing a generic NACK according to RFC 4585 should
# be present, such as:  "a=rtcp-fb:* nack".  Only RTP video stream packet retransmission
# will be requested.
#
#NACKRtcpRequestRetransmit=1


#
# NACKRtpRetransmit=[ 0 | 1 ]
#
# Set to 1 to enable RTP packet retransmission upon receiving an RTCP NACK from a remote
# receiver describing a packet which was lost in transmission.  Only RTP video stream packets 
# may be retransmitted. 
#
#NACKRtpRetransmit=0


#
# REMBRtcpNotify=[ 0 | 1 ]
#
# Set to 1 to enable RTCP APP specific REMB (Receiver Estimated Maximum Bandwidth) notifications
# to be sent to the remote RTP sender to aid in bitrate adjustment.  If reading an input 
# SDP file to setup packet capture, the SDP attribute describing the REMB Feedback type  should
# be present, such as:  "a=rtcp-fb:* remb" or "a=rtcp-fb:* goog-remb".  Only RTP video stream 
# packet retransmission will be requested.
#
#
#REMBRtcpNotify=1


#
# REMBRtcpMaxRateKbps=[ Bitrate in Kbps ]
# The maximum permitted RTCP APP specific REMB (Receiver Estimated Maximum Bandwidth) bitrate 
# (in Kbps by default).  The actual bitrate reported to the remote RTP sender will not 
# be higher than this value and may be lower depending on the network transmission conditions 
# detected.
#
#REMBRtcpMaxRateKbps=800Kbps


#
# REMBRtcpMinRateKbps=[ Bitrate in Kbps ]
# The minimum permitted RTCP APP specific REMB (Receiver Estimated Maximum Bandwidth) bitrate 
# (in Kbps by default).  The actual bitrate reported to the remote RTP sender will not 
# be lower than this value and may be higher depending on the network transmission conditions 
# detected.
#
#REMBRtcpMinRateKbps=90Kbps


#
#
# FrameThin=[ 0 | 1 ]
# Set to 1 to enable the frame thinning algorithm.  Frame thinning will selectively drop
# non-key video frames from the output stream to reduce the output bitrate.  The algorithm
# is applicable for FLV, MKV, and RTMP based forms of output of the live media stream.
# The algorithm will automatically adjust the output bitrate depending on the ability of
# the client player to load the media content in real-time.  Use of frame thinning may  
# result in choppy video playback while maintaining continuous audio.
#
#FrameThin=0

