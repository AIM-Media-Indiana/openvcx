#
# This file can be used to define the transcoder configuration.  To process this
# file use the command line argument '--xcode=etc/xcode.conf'.  
# Alternatively the transcoder options can be passed directly in 
# the '--xcode=' command line argument.
#
#
# The xcode configuration file will not be processed until the input video
# dimensions are discovered.  Using an xcode configuration file allows the use of 
# conditional statements based on the below listed variables.  These are defined
# in an 'if' clause such as 'if(inputWidth > 480) { ... }'
#
# inputWidth - The resolution width of the input stream
# inputHeight - The resolution height of the input stream
#
#
# Up to 4 encoder output indexes can be specified to produce parallel
# encodings.   Specify the ouput index [ 1 - 4 ] as a suffix of the encoder
# parameter being set.  The following example will produce two output encodings
# with the first having a width of 640px at 800kb/s.  The second will have
# a width of 320px at 200kb/s.
#
# "videoBitrate=800, videoWidth=640, videoBitrate2=200, videoWidth2=320"
# 
#
#
#


#
# cropBottom=[ bottom crop pixels ] 0 ... n
# cropb=
#
#cropBottom=0

#
# cropLeft=[ left crop pixels ] 0 ... n
# cropl=
#
#cropLeft=0

#
# cropRight=[ right crop pixels ] 0 ... n
# cropr=
#
#cropRight=0

#
# cropTop=[ top crop pixels ] 0 ... n
# cropt=
#
#cropTop=0

#
# padAspectRatio=[ 0 | 1 ] 1: preserve original pic aspect ratio when using padding
# padaspect=
#
#padAspectRatio=0

#
# padBottom=[ bottom padding pixels ] 0 ... n
# padb=
#
#padBottom=0

#
# padLeft=[ left padding pixels ] 0 ... n
# padl=
#
#padLeft=0

#
# padRight=[ right padding pixels ] 0 ... n
# padr=
#
#padRight=0

#
# padColorRGB=[ RGB pad color ] 0xffffff : white, 0x000000 : black
# padrgb
#
#padColorRGB=0x000000

#
# padTop=[ top padding pixels ] 0 ... n
# padt=
#
#padTop=0

#
# videoCodec=[ video output codec ]   h264  : H.264
# vc=                                 mpg4  : MPEG-4 part 2
#                                     h263+ : H.263 plus
#                                     h263  : H.263
#                                     vp8   : VP8 
#                                     same, passthru : Pass-through
#
#videoCodec=h264

#
# videoPassthru=[ on | off ] enable pass-thru encoding
# The non-transcoded 'passthru' video is placed into the first output index.
# passthru=
#
#videoPassthru=off

#
# videoBitrate=[ video output bitrate in Kb/s ] 0 ... n
# The following values will evaluate to 500Kb/s.   vb=500, vb=500Kb, vb=.5Mbs, vb=500000b/s
# vb=
#
#videoBitrate=

#
# videoBitrateTolerance=[ video output bitrate tolerance in Kb/s ] 0 ... n
# vbt=
#
#videoBitrateTolerance=

#
# vbvBufferSize=[ video output VBV max size in Kb ] 0 ... n
# vbvbuf=
#
#vbvBufferSize=

#
# vbvMaxRate=[ video output VBV max rate in Kb/s ] 0 ... n
# vbvmax=
#
#vbvMaxRate=

#
# vbvMinRate=[ video output VBV min rate in Kb/s ] 0 ... n
# vbvmin=
#
#vbvMinRate=

#
# vbvInitialFullness=[ video output VBV initial fullness factor as float ] 0 ... 1.0
# vbvinit=
#
#vbvInitialFullness=

#
# vbvAggressivity=[ VBV buffer aggressivity ] 0 ... 1.0 (This maps to VP8 "undershoot_pct")
# vbvagg=
#

#
# videoInputConstantFps=[ 1 : video constant input frame rate ] 0 : default use input RTP ts/pts
# vcfrin=
#
#videoInputConstantFps=0

#
# videoOutputConstantFps=[ 1 : video constant output frame rate ] 0 : default use input RTP ts/pts
# vcfrout=
#
#videoOutputConstantFps=0

#
# videoOutputFpsDriftTolerance=[ Drift tolerance for 'vcfrout' in ms ] 0 : default 400 (ms)
# vcfrtol=
#
#videoOutputFpsDriftTolerance=400

#
# videoEncoderQuality=[ video encoder speed ] 0 : lowest, 1 : low, 2 : medium, 3 : high, 4: highest 
# vqual=
#
#videoEncoderQuality=3

#
# videoEncoderSpeed=[ video encoder speed ] 0 : slowest, 1 : slow, 2: medium, 3 : fast, 4 : faster
# vf=
#
#videoEncoderSpeed=1

#
# videoFps=[ frame rate as float ] 0 ... n
# vfr=
#
#videoFps=

#
# videoGOPMs=[ video GOP max size in ms ] 0 : default, 0 ... n
# The value "infinte" can be used to request the encoder to only produce 
# a single IDR.  The 'videoForceIDR' parameter can subsequently be used 
# to request an IDR when performing an encoder configuration update.
# To produce output only key frames use 'videoGOPMS=0'
# vgop=
#
#videoGOPMs=

#
# videoMinGOPMs=[ video GOP min size in ms ] 0 : default, 0 ... n
# vmingop=
#
#videoMinGOPMs=

#
# videoForceIDR=[ on | off ] sends an IDR request to the underlying encoder 
# This flag can be used to request an IDR during an encoder configuration
# update.  
# vidr=
#
#vidr=

#
# videoLookaheadFramesMin1=[ video lookahead delay (minus one) ] 0 : default, 1 : zero, 2 ... (n - 1)
# vlh=
#
#videoLookaheadFramesMin1=0

#
# videoProfile=[ video output profile ] H.264 66 : baseline, 77 : main, 100 : high
# vp=              MPEG-4 [ 4 bits profile | 4 bits level ] (240 - 255 Adv Simple Profile)
#
#videoProfile

#
# videoQuantizer=[ video target (P frame) quantizer ] 10-51, Only valid for crf, cqp rate control types
# vq=
#
#videoQuantizer=

#
# videoQuantizerBRatio=[ video target B frame : P frame quantizer ratio ] H.264 default is 1.25
# vqbratio=
#
#videoQuantizerBRatio=

#
# videoQuantizerIRatio=[ video target I frame : P frame quantizer ratio ] H.264 default is .71
# vqiratio=
#
#videoQuantizerIRatio=

#
# videoQuantizerMax=[ video maximum quantizer ] H.264 default is 51, MPEG-4 default is 31
# vqmax=
#
#videoQMax=

#
# videoQuantizerMin=[ video minimum quantizer ] H.264 default is 10, MPEG-4 default is 2
# vqmin=
#
#videoQMin=

#
# videoQuantizerDiff=[ video maximum quantizer difference between two frames ] 
# vqdiff=
#
#videoQuantizerDiff=

#
# videoRateControl=[ video rate control type ] btrt : default, crf, cqp
# vrc=
#
#videoRateControl=

#
# videoScalerType=[ resolution resize algo type ], 1: fastest, 5: slowest
# vsc=
#
#videoScalerType=3

#
# videoISceneAggressivity=[ I frame scene cut insertion aggressivity ], 
# This value is encoder specific.  H.264 :  1: least, 100: aggressive
# vsi=
#
#videoISceneAggressivity=

#
# videoSliceSizeMax=[ max encoded slice size  ] (Set to < MTU for H.264 packetization mode 0)
# vslmax=
#
#videoSliceSizeMax=

#
# videoThreads=[ video encoder specific thread count ] 0 : defaults to 2 * num cpus
# vth=
#
#videoThreads=

#
# videoDecoderThreads=[ video decoder specific thread count ] 0 : defaults to decoder specific default 
# vthd=
#
#videoDecoderThreads=

#
# videoUpsampling=[ 1 : allow upsampling of output frame rate ], vcfrout must be enabled
# vup=
#
#videoUpsampling=0

#
# videoWidth=[ horizontal resolution ] 0 ... n, if one is absent, will preserve input aspect ratio
# vx=
#
#videoWidth=

#
# videoHeight=[ vertical resolution ] 0 ... n, if one is absent, will preserve input aspect ratio
# vy=
#
#videoHeight=

# mbtree=[ 0 | 1 ]: 1 : default, 0: disabled.  H.264 specific Macroblock-tree lookahead control
# mb-tree=
#mbtree

#
# audioCodec=[ audio output codec ] aac : AAC, ac3 : AC3, g711a : alaw, g711u : mulaw, silk : SILK, opus : OPUS
# ac=
#
#audioCodec=

#
# audioBitrate=[ audio output bit rate per channel in b/s ]
# ab=
#
#audioBitrate=

#
# audioForce=[ force audio transcoding ] 0 : default, 1 : Force even if same format, rate, channels
# af=
#
#audioForce=0

#
# audioSampleRate=[ audio output sample rate Hz ]
# ar=
#
#audioSampleRate=

#
# audioChannels=[ audio output channels ]
# as=
#
#audioChannels=

#
# audioVolume=[ audio volume adjustmentl ] 0 < n < 256 , 256 = none, 256 < n < 65536
# av=
#
#audioVolume=

#
# audioProfile=[ audio encoder specific output profile ] 
# ap=
#
#audioProfile




#
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
#               A sample encoder configuration starts below
# -----------------------------------------------------------------------
# -----------------------------------------------------------------------
#


#
# Always include the output codec type
#
videoCodec=h264

#
# Define any audio encoder properties
#
# audioCodec=aac, audioSampleRate=44100, audioChannels=1

#
# Enable pass-thru encoding of the input stream
# If pass-thru is enabled, the input codec must match the
# encoder output codec type.
#
# videoPassthru=on

#
# Define an encoder configuration for output index 1 
#
videoWidth=320, videoBitrate=200, videoProfile=66;

#
# Define the encoder configuration for output index 2 
# This configuration will only be set if the input resolution width
# matches the conditional criteria.
# All encoder properties should contain the output specific index.
#
if(inputWidth >= 480) {
    videoWidth2=480
    videoBitrate2=400
    videoProfile2=77
}

#
# Define the encoder configuration for output index 3 
# This configuration will only be set if the input resolution width
# matches the conditional criteria.
# All encoder properties should contain the output specific index.
#
if(inputWidth >= 720)
    videoWidth3=720, videoBitrate3=900, videoProfile3=77




