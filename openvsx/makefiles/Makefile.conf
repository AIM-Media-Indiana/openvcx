
HAVE_DARWIN=0
HAVE_LINUX=0

UNAME_S:=$(shell uname -s)
ifeq ($(UNAME_S),Darwin)
  HAVE_DARWIN=1
else
ifeq ($(UNAME_S),Linux)
  HAVE_LINUX=1
endif
endif

ifeq ($(HAVE_DARWIN),1)
  ARCH=mac_x86_64
else
  ARCH=linux_x86_32
endif

-include ./makefiles/vsxconfig.mak
-include ../makefiles/vsxconfig.mak

export MACOSX_DEPLOYMENT_TARGET=10.9
#DEVPATH=/Developer/usr/bin/

CC = ${DEVPATH}gcc
CPP = $(CC)
AR = ${DEVPATH}ar
RANLIB = ${DEVPATH}ranlib
CP = cp
RM = /bin/rm -rf
E = echo
MKDIR = mkdir -p
ifeq ($(HAVE_DARWIN),1)
  STRIP = ${DEVPATH}strip -u
else
  STRIP = ${DEVPATH}strip
endif

BUILD_DIR=bin_$(ARCH)
INCLUDE_DIRS=
DEFS=
OBJS=
ARCH_DIR=
OBJS_ARCH=
LIBS=
LIBS_XCODE=
LIBS_EXT=
LIBS_DBGMALLOC=
LIBS_EXT_CRYPTO=
LIBS_EXT_SSL=
LIBS_EXT_SRTP=
FPIC=-fpic
CFLAGS=
CFLAGS_GDB=
CFLAGS_BASE= -Wall -D_REENTRANT -fno-strict-aliasing ${FPIC}
INCLUDE_DIRS_CRYPTO=
THIRDPARTYPATH=../third-party/$(ARCH)

LDFLAGS_SO=${FPIC}
LDFLAGS=${LDFLAGS_SO}
LDFLAGS_EXE=
LIB_PTHREAD=-lpthread
LIB_ZLIB=-lz
#zlib is required by libavcodec/pngdec.c
ifeq ($(HAVE_DARWIN),1)
  LIB_ZLIB=-lz
else
  LIB_ZLIB=${THIRDPARTYPATH}/zlib/lib/libz_static.a
endif

#
# Lite Version
#
ifeq ($(CFG_VERSION_LITE),1)
  # The lite version disables xcode (pip, conferencing, mixer), recording, srtp, ssl
  CFG_HAVE_RECORDING=0
  CFG_HAVE_TRANSCODING=0
  CFG_OPENSSL_SSL=0
  CFG_OPENSSL_1_0_1=0
  CFG_OPENSSL_SSL_STATIC=0
  CFG_HAVE_SRTP=0
  CFG_HAVE_DTLS=0
  CFG_HAVE_TURN=0
  DEFS+=-DLITE_VERSION
endif

#
# CFG_HAVE_LICENSE
#
ifeq ($(CFG_HAVE_LICENSE),1)
DEFS+=-DVSX_HAVE_LICENSE 
endif

ifeq ($(CFG_GDB),1)
  CFLAGS_GDB+=-ggdb
  DEFS+= -DVSX_HAVE_DEBUG
else
  CFLAGS_GDB+=-O2
endif
CFLAGS+=${CFLAGS_BASE} ${CFLAGS_GDB}

ifeq ($(CFG_LDD_STATIC),1)
  ifeq ($(CFG_HAVE_TRANSCODING),1)
    CFG_HAVE_TRANSCODING=0
  endif
  LDFLAGS+=-static
else
  #ifeq ($(HAVE_LINUX),1)
  #  LDFLAGS_EXE=-Wl,-rpath,./lib
  #endif
endif


ifeq ($(CFG_HAVE_TRANSCODING),1)

  FFMPEGPATH=${THIRDPARTYPATH}/ffmpeg-0.10.2
  LIBX264PATH=${THIRDPARTYPATH}/libx264
  LIBFAACPATH=${THIRDPARTYPATH}/faac-1.28
  LIBOPENCOREAMRPATH=${THIRDPARTYPATH}/opencore-amr-0.1.2

  DEFS+=-DENABLE_XCODE

  ifeq ($(HAVE_DARWIN),1)
    HAVE_THIRDPARTY_SO=0
  else
    HAVE_THIRDPARTY_SO=1
    LIBS_EXT_LD_PREFIX=-Wl,--allow-multiple-definition -Wl,--whole-archive
    LIBS_EXT_LD_SUFFIX=-Wl,--no-whole-archive
  endif

  ifeq ($(CFG_TRANSCODING_IPC),1)
    DEFS+=-DXCODE_IPC
    BUILD_DIR=binipc_$(ARCH)
  else

    ifeq ($(HAVE_LINUX),1)
      LIBS_IXCODE+= ./xcoder/${BUILD_DIR}/libixcode.a
    endif

    ifeq ($(CFG_TRANSCODING_SO),1)
      LIBS_XCODE+=-L./xcoder/${BUILD_DIR} -lxcode
    else
      ifeq ($(CFG_TRANSCODING_STATIC),1)

        LIBS_XCODE+=./xcoder/${BUILD_DIR}/libxcode.a
        LIBS_EXT+=-L${FFMPEGPATH}/libavcodec -lavcodec \
          -L${FFMPEGPATH}/libavutil -lavutil \
          -L${LIBX264PATH} -lx264 \
          -L${FFMPEGPATH}/libswscale -lswscale \
          -L${LIBFAACPATH} -lfaac
        INCLUDE_DIRS+=-I${FFMPEGPATH}

      endif
    endif
  endif

else
  FFMPEGPATH=.
endif

ifeq ($(CFG_HAVE_RECORDING),1)
  DEFS+=-DENABLE_RECORDING
endif

ifeq ($(CFG_HAVE_PCAP),1)
  DEFS+= -DENABLE_PCAP
  PCAP_LIB= -lpcap
  LIBS_EXT+= ${PCAP_LIB}
else
  DEFS+= -DDISABLE_PCAP
endif

ifeq ($(CFG_DEBUG_MALLOC),1)
DEFS += -DDBGMALLOC
LIBS_DBGMALLOC += -L../libdbgmalloc -Wl,--wrap,malloc -Wl,--wrap,free \
        -Wl,--wrap,calloc -Wl,--wrap,realloc \
        -Wl,--wrap,mmap -Wl,--wrap,munmap -ldbgmalloc
#LIBS_DBGMALLOC_XCODE=${LIBS_DBGMALLOC}
endif

ifeq ($(CFG_OPENSSL_CRYPTO), 1)

  ifeq ($(CFG_OPENSSL_1_0_1), 1)
    OPENSSL_DIR=${THIRDPARTYPATH}/openssl-1.0.1e
    INCLUDE_DIRS_CRYPTO += -I${OPENSSL_DIR}/include

    ifeq ($(CFG_OPENSSL_SSL_STATIC), 1)
      ifeq ($(HAVE_DARWIN),1)
        LIBS_EXT_CRYPTO += ${OPENSSL_DIR}/lib/libcrypto_static.a
      else 
        LIBS_EXT_CRYPTO_STATIC=${OPENSSL_DIR}/lib/libcrypto_static.a
        LIBS_EXT_CRYPTO += ${LIBS_EXT_CRYPTO_STATIC}
        LIBS_EXT_CRYPTO_STATIC_DLOPEN=-ldl
      endif
    else
      LIBS_EXT_CRYPTO += -L${OPENSSL_DIR}/lib -lcrypto.1.0.0
    endif

  else
    LIBS_EXT_CRYPTO += -lcrypto
  endif

  DEFS+=-DVSX_HAVE_CRYPTO
endif

ifeq ($(CFG_OPENSSL_SSL), 1)

  ifeq ($(CFG_OPENSSL_1_0_1), 1)

    ifeq ($(CFG_OPENSSL_SSL_STATIC), 1)
      ifeq ($(HAVE_DARWIN),1)
        LIBS_EXT_SSL += ${OPENSSL_DIR}/lib/libssl_static.a
      else
        LIBS_EXT_SSL_STATIC=${OPENSSL_DIR}/lib/libssl_static.a
        LIBS_EXT_SSL += ${LIBS_EXT_SSL_STATIC}
      endif

    else
      LIBS_EXT_SSL += -L${OPENSSL_DIR}/lib -lssl.1.0.0
      ifeq ($(HAVE_LINUX),1)
        LIBS+= -Wl,-rpath ${OPENSSL_DIR}/lib  
      endif
    endif

    ifeq ($(CFG_HAVE_DTLS), 1)
      DEFS+=-DVSX_HAVE_SSL_DTLS
    endif

    ifeq ($(CFG_HAVE_TURN), 1)
      DEFS+=-DVSX_HAVE_TURN
    endif

  else
    LIBS_EXT_SSL += -L${OPENSSL_DIR}/lib -lssl
  endif

  DEFS+=-DVSX_HAVE_SSL
endif

ifeq ($(CFG_HAVE_SRTP), 1)
  LIBS_EXT_SRTP += ${THIRDPARTYPATH}/srtp/libsrtp.a
  INCLUDE_DIRS_SRTP= -I${THIRDPARTYPATH}/srtp/include -I${THIRDPARTYPATH}/srtp/include/crypto
  DEFS+=-DVSX_HAVE_SRTP
endif

ifeq ($(CFG_HAVE_DLOPEN),1)
  ifeq ($(HAVE_LINUX),1)
    LIB_DLOPEN=-ldl
  endif 
endif


DEFS+= -DARCH_$(ARCH)
