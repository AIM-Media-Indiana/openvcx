#
# sip-conference.conf
#
# OpenVCX (Video Conferencing eXchange) config for sip-conference.war 
#


#
# The SDP published 'c=' address of this server
# This can be a Hostname, IP, or environment variable reference
#
sdp.connect.location=${SDP_CONNECT_LOCATION}


#
# RTP port range of listening Media processor UDP/RTP sockets
#
rtp.port.start=10200
rtp.port.end=14000


#
# Default Outgoing MTU (Maximum Transimssion Unit) of media UDP/RTP packets
#
rtp.mtu=1250


#
# Internal control port range to communicate with Media processor process(es)
#
mediaprox.control.tcp.start=6500
mediaprox.control.tcp.end=7500


#
# Media processor installation home directory
# This can be a Hostname, IP, or environment variable reference
#
mediaprox.home.dir=${VSX_HOME}


#
# Media processor temporary file directory
# This directory is used to store any SDP files
#
mediaprox.tmp.dir=${VSX_HOME}/tmp


# Media processor recording media file directory
# This directory is used as the root media directory for storing 
# conference recordings and media.
#
mediaprox.record.dir=${VSX_HOME}/recording


#
# Media processor s start script invoked for conference creation
#
mediaprox.start.script=${VSX_HOME}/bin/startconf.sh


#
# Location of NMGS HTTP PIP control server used to 
# add/remove conference participants.
#
mediaprox.pip.server.location=127.0.0.1


#
# Directory path where media chimes, announcements, and ring files 
# are stored.  This should be an an absolute path or a local path 
# relative to VSX_HOME so that it is accessible by Media processor  process(es).
#
media.chime.dir=${CATALINA_HOME}/media


#
# Directory to store conference specific configuration conference
# definition files.  A conference number is provisioned by creating 
# a conference definition filename matching the virtual conference SIP URI
# [ conference SIP URI ].conference
#
conference.definition.dir=conferences/


#
# A true|false boolean enabling conference definition template file 
# auto-provisioning Using the '/webrtc-demo/x/createNumber' webservice 
# URL.  Auto-provisioned conference numbers are stored in
# <conference.definition.dir>/auto
#
conference.definition.provision.auto=true


#
# Auto-provisioning conference definition template path.
# The auto conference template is used to dynamically provision
# a conference when accessing the WebRTC client URL at
# http://[ SERVER HOST]:8090/webrtc-demo/
#
conference.definition.template=auto.template


#
# Server storage directory path for temporary files.
#
conference.temp.dir=temp/


#
# OpenSSL certificate file for SSL/DTLS/SRTP
# A valid certificate must be provided for DTLS to be enabled.
#
# This certificate is provided for demo purposes only and
# should not be utilized in production environments.
#
# This certificate was created using the following command:
#
# openssl req -new -x509 -key dtlskey.pem -out dtlscert.pem 
#
ssl.dtls.certificate=${VSX_HOME}/etc/dtlscert.pem


#
# OpenSSL private key file for SSL/DTLS/SRTP
#
# The private key is included for demo purposes only and does
# not contain a passphrase.  It was created with the following
# command:
#
# openssl genrsa -out dtlskey.pem 1024
#
ssl.dtls.key=${VSX_HOME}/etc/dtlskey.pem


#
#  
# Script invoked on startup to extract the fingerprint of the
# DTLS certificate in use.  The fingerprint is used in SDP creation
# when negotiating a DTLS-SRTP media connection.
#
#ssl.dtls.fingerprint.script=${CATALINA_HOME}/bin/certfingerprint.sh


#
# Media Processor Web Portal listener address and port.
# Setting this value enables the media web portal startup script
# ${VSX_HOME}/startvsxwp.sh to be invoked from the startvcx.sh script.
#
# Commenting this entry or leaving the parameter blank will disable the 
# media web portal from starting.
#
# The web portal is used to manage media recordings and services
# live and stored media client requests.
#
mediaportal.listener.address=${SDP_CONNECT_LOCATION}:8080


#
# A true|false boolean indicating whether the server should handle SIP REGISTER 
# requests.  This value can be explicitly set to 'false' if the 
# server is used in-conjunction with an Application Server (AS).
#
#sip.register.accept=true


#
# A true|false boolean indicating whether the server should maintain a database
# of locally registered SIP URIs.   The database may be used to send outgoing
# SIP INVITE requests to locally registered users.
#
#sip.register.local.db=true


#
# A true|false boolean enabling this server to generate outgoing INVITE requests.
# Outgoing INVITE requests can be controlled by the SIP URI specific conference definition
# file 'inviteSIPUris' and 'inviteCalledParty' properties.
#
#sip.invite.outgoing=true


#
# A true|false boolean enabling this server to generate outgoing INVITE requests to 
# SIP URIs which are not locally registered.
# Outgoing INVITE requests can be controlled by the SIP URI specific conference definition
# file 'inviteSIPUris' and 'inviteCalledParty' properties.
#
#sip.invite.outgoing.remote=true


#
# SIP Domain of this server.  Outgoing INVITE requests will only be sent to a SIP URI
# not matching the domain of the local domain unless the SIP URI is locally registered.
# If this value is not set then only outgoing INVITE requests to clients registered 
# with this server will be honored.
#
#sip.local.domain=exampledomain.com


#
# SIP domain of the SIP "From:" header of outoing INVITE requests.  This parameter 
# represents only the domain portion of the SIP URI and not the username.
# If this setting is missing then the "From:" SIP domain will default to the value of
# sip.local.domain.
#
#sip.invite.from.domain=exampledomain.com


#
# An optional SIP proxy which will receive outgoing INVITE requests for SIP URIs which
# are not locally registered.  This can be set to a CSCF.
#
# If this value is not set, then any outgoing INVITE requests to non-local SIP URIs will 
# be sent to the domain of the called party SIP URI.
#
# The value can take the form similar to a SIP contact header, such as any one of the
# following examples.  "exampledomain.com" , "exampledomain:5060" ,
# "exampledomain.com:5060;transport=tcp" , "<sip:exampledomain.com:5060;transport=ws>"
#
# This value is ignored if 'sip.invite.outgoing.remote=' is set to 'false'.
#
#
#sip.invite.proxy.route=


#
# An optional list of SIP domains which should be denied from receiving outgoing 
# INVITE requests separated by a comma.
#
# For eg., the following list will prevent sending outgoing INVITE requests for an
# invitation to the SIP URI "alice@exampledomain.com"
# sip.invite.domain.list.deny=exampledomain.com, anotherexampledomain.com
#
#sip.invite.domain.list.deny=


#
# An optional list of SIP domains which if not explicitly matched will be denied
# from receiving outgoing INVITE requests separated by a comma.
#
# An empty 'allow' list will permit sending of outoing INVITE requests to any
# domain unless explicitly matched in the 'deny' list.
#
# For eg., the following list will allow sending outgoing INVITE requests for an
# invitation to the SIP URI "alice@exampledomain.com"
# sip.invite.domain.list.deny=exampledomain.com, anotherexampledomain.com
#
#sip.invite.domain.list.allow=


#
# A comma separated list of one or more IP address / subnet mask representing a 
# set of hosts from which this server will accept SIP messages from.
# If not exposed directly to client UE, set this to any AS (Application Server) 
# or known SIP proxies.
# 
# sip.address.list.source=192.168.1.0/24, 192.168.2.1/32
#
#sip.address.list.source=


#
# List of supported audio codecs ordered by priority index
# codec name / clock rate / [ Optional channel count ] / payload type / [ Optional fmtp ]
#
codec.audio.1=OPUS/48000/2/110/
#codec.audio.2=OPUS/48000/2/110/maxplaybackrate=24000;sprop-maxcapturerate=24000;
#codec.audio.3=OPUS/48000/2/110/maxplaybackrate=16000;sprop-maxcapturerate=16000;
codec.audio.4=SILK/16000/109
codec.audio.5=SILK/8000/107
#codec.audio.5=SILK/8000/107/useinbandfec=1;usedtx=0
codec.audio.6=PCMA/8000/8
codec.audio.7=PCMU/8000/0


#
# List of supported video codecs ordered by priority index
# The priority index will influence which codec the server will try
# to choose when negotiating a supported SDP.
#
# codec name / clock rate / payload type / [ Optional fmtp ]
#

codec.video.1=VP8/90000/102
codec.video.2=H264/90000/97/profile-level-id=42000d;packetization-mode=0;
##codec.video.2=H264/90000/97/profile-level-id=42000d;packetization-mode=1;
codec.video.3=MP4V-ES/90000/121
codec.video.4=H263-1998/90000/115/QCIF=2;CIF=2;VGA=2;CIF4=2;I=1;J=1;T=1
codec.video.5=H263/90000/34/QCIF=2;CIF=2;VGA=2;CIF4=2

#
# List of device type identification strings coupled with a User-Agent string match
# user.agent.string.stype.[index] - A unique device type identification string
# user.agent.string.match.[index] - A search string match against the client User-Agent
#                                   used for device type identification
#
user.agent.string.match.1="WebRTCPhone/webkit/android"
user.agent.device.stype.1="webrtc_android"
user.agent.string.match.2="WebRTCPhone/webkit/unknown"
user.agent.device.stype.2="webrtc_chrome"
user.agent.string.match.3="WebRTCPhone/mozilla/unknown"
user.agent.device.stype.3="webrtc_firefox"
user.agent.string.match.4="WebRTCPhone"
user.agent.device.stype.4="webrtc"
